# 동적 계획법 = 다이나믹 프로그래밍(dp)
# DP는 상향식과 하향식이 존재하는데
# 해당 문제는 처음 두 수를 알기 때문에 상향식으로 풀어야 한다.
# 상향식 : 제일 작은 인덱스의 수 부터 목표하는 값으로 향하는 것
# 하향식 : 맨 위의 값에서 재귀로 제일 작은 인덱스를 향하는 것

# 그리디 : 처음 최적의 방법이 끝까지 반례없이 적용
# DP : 모든 경우의 수를 탐색하여 그 안에서 최솟값을 찾음
n = int(input())
d = [0] * (n + 1)

for i in range(2, n+1):
    d[i] = d[i - 1] + 1
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)
print(d[n])