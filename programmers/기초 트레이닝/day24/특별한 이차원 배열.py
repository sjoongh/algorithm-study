# 문제 설명
# 정수 n이 매개변수로 주어질 때, 다음과 같은 n × n 크기의 이차원 배열 arr를 return 하는 solution 함수를 작성해 주세요.
#
# arr[i][j] (0 ≤ i, j < n)의 값은 i = j라면 1, 아니라면 0입니다.
# 제한사항
# 1 ≤ n ≤ 100
# 입출력 예
# n	result
# 3	[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
# 6	[[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]]
# 1	[[1]]
# 입출력 예 설명
# 입출력 예 #1
#
# 예제 1번의 n의 값은 3으로 다음과 같이 2차원 배열을 채울 수 있습니다.
#
# i \ j	0	1	2
# 0	1	0	0
# 1	0	1	0
# 2	0	0	1
# 따라서 [[1, 0, 0], [0, 1, 0], [0, 0, 1]]을 return 합니다.
#
# 입출력 예 #2
#
# 예제 2번의 n의 값은 6으로 다음과 같이 2차원 배열을 채울 수 있습니다.

# i \ j	0	1	2	3	4	5
# 0	1	0	0	0	0	0
# 1	0	1	0	0	0	0
# 2	0	0	1	0	0	0
# 3	0	0	0	1	0	0
# 4	0	0	0	0	1	0
# 5	0	0	0	0	0	1
# 따라서 [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]]을 return 합니다.
#
# 입출력 예 #3
#
# 예제 1번의 n의 값은 1이고 다음과 같이 2차원 배열을 채울 수 있습니다.
#
# i \ j	0
# 0	1
# 따라서 [[1]]을 return 합니다.

"""
해당 문제를 푸는데 반복문 두개를 사용해서 해당 위치에 대입하면 끝나는 간단한 문제라고 생각했다.
근데 어찌된일인지 이차원 배열의 특정 요소가 변경되는것이 아니라 0번 인덱스에 위치한 모든 열의 모든 요소가 1로 변경되었다.
원인은 얕은 복사였다. 파이썬의 * 연산자는 초기화할때 값을 각각 할당하는 것이 아니라 하나의 객체를 만들어 놓고 얉은복사를 진행한다..
때문에 깊은 복사를 사용해 각각의 배열로 인식시키려면 for문을 사용해야 한다.
원인을 파악하고 나니 속이 후련하다~
"""
def solution(n):
    # 얇은 복사 때문에 전체가 1로 바뀌는 현상..
    # answer = [[0]*n]*n
    # 깊은 복사로 변경
    answer = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if i == j:
                answer[i][j] = 1
    return answer

print(solution(3))