# 문자열 s가 입력되었을 때 다음 규칙을 따라서 이 문자열을 여러 문자열로 분해하려고 합니다.
#
# 먼저 첫 글자를 읽습니다. 이 글자를 x라고 합시다.
# 이제 이 문자열을 왼쪽에서 오른쪽으로 읽어나가면서, x와 x가 아닌 다른 글자들이 나온 횟수를 각각 셉니다. 처음으로 두 횟수가 같아지는 순간 멈추고, 지금까지 읽은 문자열을 분리합니다.
# s에서 분리한 문자열을 빼고 남은 부분에 대해서 이 과정을 반복합니다. 남은 부분이 없다면 종료합니다.
# 만약 두 횟수가 다른 상태에서 더 이상 읽을 글자가 없다면, 역시 지금까지 읽은 문자열을 분리하고, 종료합니다.
# 문자열 s가 매개변수로 주어질 때, 위 과정과 같이 문자열들로 분해하고, 분해한 문자열의 개수를 return 하는 함수 solution을 완성하세요.
#
# 제한사항
# 1 ≤ s의 길이 ≤ 10,000
# s는 영어 소문자로만 이루어져 있습니다.
# 입출력 예
# s	result
# "banana"	3
# "abracadabra"	6
# "aaabbaccccabba"	3
# 입출력 예 설명
# 입출력 예 #1
# s="banana"인 경우 ba - na - na와 같이 분해됩니다.
#
# 입출력 예 #2
# s="abracadabra"인 경우 ab - ra - ca - da - br - a와 같이 분해됩니다.
#
# 입출력 예 #3
# s="aaabbaccccabba"인 경우 aaabbacc - ccab - ba와 같이 분해됩니다.

# 같은 단어와 다른 단어가 나온 count 수가 일치해야 하는데
# 분리하는 구분점을 찾기가 쉽지 않았다.
# 가장 처음의 if문을 내가 생각한 이론상으로는 마지막에 배치해야
# cnt1, cnt2를 초기화할 수 있었는데
# if문을 가장 맨 앞에 배치시켜 다음 문자열 (i+1) 차례에
# 이전의 cnt1, cnt2가 같은지를 먼저 비교하면 쉽게 처리할 수 있었다.
# 문제에서 '만약 두 횟수가 다른 상태에서 더 이상 읽을 글자가 없다면, 역시 지금까지 읽은 문자열을 분리하고, 종료합니다.'라고 알려주었다.
# 'aaabc'와 같이 끝까지 읽었을 때 isx=3, isnotx=2가 되어, 두 횟수가 다른 상태에서
# 더 이상 읽을 문자열이 없으면 문자열을 분리한다는 것이므로 answer+1을 해 결과적으로 answer=1이 되어야 한다는 뜻이다.
# 그러므로 answer를 먼저 +1 한 상태에서 isx, isnotx를 계산해도 결과는 달라지지 않는다.
# TODO : 문제를 풀이할때 정말 이해가 가지 않는다면 손으로 직접 그려보고 풀이하는 습관을 들여보자!!

# TODO : 다시 풀어볼것















# =================================================================================
# def solution(s):
#     answer = 0
#     cnt1=0; cnt2=0
#     for i in s:
#         if cnt1==cnt2:
#             answer+=1
#             k=i
#         if k==i:
#             cnt1+=1
#         else:
#             cnt2+=1
#
#     return answer