# 문제 설명
# 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
# ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
#
# 조이스틱을 각 방향으로 움직이면 아래와 같습니다.
#
# ▲ - 다음 알파벳
# ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
# ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
# ▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
# 예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.
#
# - 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
# - 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
# - 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
# 따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
# 만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.
#
# 제한 사항
# name은 알파벳 대문자로만 이루어져 있습니다.
# name의 길이는 1 이상 20 이하입니다.
# 입출력 예
# name	return
# "JAZ" 11
# "JEROEN"	56
# "JAN"	23

#---------------------------------------------
# FIXME : 문제 풀이를 이상하게 했음 -> 커서 위치에 따라 A의 길이가 가장 짧은 문자열로 이동해야함
def solution(name):
    answer = 0
    # 1. 이전 커서 이동 값 ( 초기값 - 이름의 길이 - 1 )
    min_move = len(name) - 1
    # enumerate()로 리스트 -> 튜플로 변환해서 인덱스, 원소로 반복문 돌림
    for i, char in enumerate(name):
        # FIXME : 알파벳의 자리 찾는 작업 -> 기존에 구현했던 방법 -> 여기에 조이스틱 무브를 count해서 추가해야함
        answer += min(ord(char) - ord('A'), ord('Z') - ord(char) + 1)

        next = i + 1
        while next < len(name) and name[next] == 'A':
            next += 1

        # 2. 기존 방식 -> A를 고려하지 않는 방식
        # 3. 연속된 A의 왼쪽 시작(연속된 A의 왼쪽 부분이 문자열 길이가 짧을경우)
        # -> 연속된 A의 왼쪽 부분을 커서가 두번 지나가기 때문에 2 * i를 하고 오른쪽 부분 len(name) -next을 더한 것
        # 4. 연속된 A의 오른쪽 시작(연속된 A의 오른쪽 부분이 문자열 길이가 짧을경우)
        # -> 연속된 A의 오른쪽 부분을 커서가 두번 지나가기 때문에 2 * i를 하고 왼쪽 부분 len(name) -next을 더한 것
        # 5. 최소값 추출
        min_move = min([ min_move, 2 * i + len(name) - next, i + 2 * (len(name) - next) ])
    return answer + min_move

print(solution("JAN"))